@model Web.Models.Reservations.ReservationInputModel

@{
    ViewData["Title"] = "Make a reservation";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Make a Reservation for room:</h2>
<hr />
<h4>Room data:</h4>
<p>@Model.RoomType.ToString()</p>
<p>@Model.RoomCapacity</p>
<p>@Model.RoomAdultPrice</p>
<p>@Model.RoomChildrenPrice</p>

<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="All" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="AccommodationDate" class="control-label"></label>
                <input asp-for="AccommodationDate" class="form-control" min="@DateTime.Today"  id="acc-date" onchange="CheckDates()" />
                <span asp-validation-for="AccommodationDate" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="ReleaseDate" class="control-label"></label>
                <input asp-for="ReleaseDate" class="form-control" min="@DateTime.Today" id="rel-date" onchange="CheckDates()" />
                <span asp-validation-for="ReleaseDate" class="text-danger"></span>
            </div>
            <div class="form-group">
                <span class="text-danger d-none" id="date-error">The room is already reserved in that period.</span>
            </div>
            <div class="form-group">
                <div class="checkbox">
                    <label>
                        <input asp-for="AllInclusive" id="all-incl" /> @Html.DisplayNameFor(model => model.AllInclusive)
                    </label>
                </div>
                <small><strong>Note:</strong> AllInclusive price: @Model.AllInclusivePrice</small>
            </div>
            <div class="form-group">
                <div class="checkbox">
                    <label>
                        <input asp-for="Breakfast" id="breakfast" /> @Html.DisplayNameFor(model => model.Breakfast)
                    </label>
                </div>
                <small><strong>Note:</strong> Breakfast price: @Model.BreakfastPrice &diams; Breakfast included in allInclusive</small>
            </div>
            <div>
                <h5>Clients data:</h5>
                <small>Leave a row blank if necessary</small>
                @for (int i = 0; i < Model.RoomCapacity - 1; i++)
                {
                    <div>
                        <div class="form-group">
                            <label asp-for="ClientData[i].FullName" class="control-label"></label>
                            <input asp-for="ClientData[i].FullName" class="form-control client-@{i.ToString();} " />
                            <span asp-validation-for="ClientData[i].FullName" class="text-danger"></span>
                        </div>
                        <div class="form-group">
                            <label asp-for="ClientData[i].Email" class="control-label"></label>
                            <input asp-for="ClientData[i].Email" class="form-control client-@{i.ToString();}" />
                            <span asp-validation-for="ClientData[i].Email" class="text-danger"></span>
                        </div>
                        <div class="form-group">
                            <div class="checkbox">
                                <label>
                                    <input asp-for="ClientData[i].IsAdult" id="client-@{i.ToString();}" /> @Html.DisplayNameFor(model => model.ClientData[i].IsAdult)
                                </label>
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div class="form-group">
                <input type="submit" value="Reserve" class="btn btn-default" />
            </div>
        </form>
    </div>
</div>


@section Scrtipts{
    <script>
        var childPrice = @Model.RoomChildrenPrice;
        var adultPrice = @Model.RoomAdultPrice;
        var allInclusicePrice =@Model.AllInclusivePrice;
        var breakfastPrice = @Model.BreakfastPrice;

        var totalPrice = 0;

        document.body.addEventListener('keydown', this.handleInteraction);
        document.body.addEventListener('click', this.handleInteraction);

        function handleInteraction() {
            totalPrice = 0;
            if (document.getElementById("all-incl").checked) {
                totalPrice += allInclusicePrice;
            }
            else if (document.getElementById("breakfast").checked) {
                totalPrice += breakfastPrice;
            }
            CheckClients();
        }

        function CheckClients() {
            var indecies = [@{string.Join(',', Enumerable.Range(0, Model.RoomCapacity - 1));}];
            indecies.forEach(index => {
                var areAllFilled = true;
                var allFieldsForPerson = document.getElementsByClassName(`client-${index}`);
                for (let node of allFieldsForPerson){
                    if (!(node && node.value)) {
                        areAllFilled = false;
                        break;
                    }
                }

                if (areAllFilled ) {
                    if (document.getElementById(`client-${index}`).checked) {
                        totalPrice += adultPrice;
                    }
                    else {
                        totalPrice += childPrice;
                    }
                }
            });
        }

        var periods = @Model.GetPeriods();
        function CheckDates() {
            var accDate = document.getElementById("acc-date");
            var relDate = document.getElementbyId("rel-date");
            if (accDate && accDate.value && relDate && relDate.value) {
                var isTaken = false;
                periods.forEach(period => {
                    if ((period.start > new Date(accDate.value) && period.accDate < new Date(relDate.value) ||
                        (period.end > new Date(accDate.value) && period.end < new Date(relDate.value))){
                        isTaken = true;
                    }
                });
                if (isTaken) {
                    document.getElementById("date-error").style = "display:block!important";
                }
                else {
                    document.getElementById("date-error").style = "display:none!important";
                }
            }
        }
        /*
          var roomIsEmpty = !room.Reservations.Any(x =>
                (x.AccommodationDate > inputModel.AccommodationDate && x.AccommodationDate < inputModel.ReleaseDate) ||
                (x.ReleaseDate > x.AccommodationDate && x.ReleaseDate < inputModel.ReleaseDate));


         if (new Date($(item).val()) > new Date("2020-7-14")) {
                    $(item).attr("value", "");
                    $("#date2").remove();
                    var date2 = '<input type="date" name="date2" id="date2"  onchange="compare(this)" />';
                    $("#div1").append(date2);
                }
                */

    </script>
}